#include <stdio.h>
#include <stdlib.h>

// Structure for a binary tree node
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed!");
        exit(1);
    }
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to perform iterative postorder traversal
void iterativePostorder(struct Node* root) {
    if (root == NULL)
        return;

    struct Node* stack[100];  // Assuming a maximum of 100 nodes in the tree
    int top = -1;
    struct Node* curr = root;
    struct Node* prev = NULL;

    do {
        while (curr != NULL) {
            stack[++top] = curr;
            curr = curr->left;
        }

        while (curr == NULL && top != -1) {
            curr = stack[top];
            if (curr->right == NULL || curr->right == prev) {
                printf("%d ", curr->data);
                top--;
                prev = curr;
                curr = NULL;
            } else {
                curr = curr->right;
            }
        }
    } while (top != -1);
}

int main() {
    // Create the binary tree
    struct Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);

    // Perform iterative postorder traversal
    printf("Postorder traversal: ");
    iterativePostorder(root);

    return 0;
}
