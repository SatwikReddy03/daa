#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_KEYS 10

int optimalBST(int keys[], int freq[], int n) {
    int cost[n][n];

    // Initialize the cost matrix with zeros
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cost[i][j] = 0;
        }
    }

    // Initialize the cost matrix for single keys
    for (int i = 0; i < n; i++) {
        cost[i][i] = freq[i];
    }

    // Calculate the cost matrix for all possible subtrees
    for (int L = 2; L <= n; L++) {
        for (int i = 0; i <= n - L + 1; i++) {
            int j = i + L - 1;
            cost[i][j] = INT_MAX;

            // Calculate the cost for each possible root in the current range
            for (int r = i; r <= j; r++) {
                int sum = 0;
                for (int k = i; k <= j; k++) {
                    sum += freq[k];
                }

                int leftCost = (r > i) ? cost[i][r - 1] : 0;
                int rightCost = (r < j) ? cost[r + 1][j] : 0;
                int totalCost = leftCost + rightCost + sum;

                if (totalCost < cost[i][j]) {
                    cost[i][j] = totalCost;
                }
            }
        }
    }

    return cost[0][n - 1];
}

int main() {
    int n;
    printf("Enter the number of keys: ");
    scanf("%d", &n);

    int keys[MAX_KEYS], freq[MAX_KEYS];

    printf("Enter the keys:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &keys[i]);
    }

    printf("Enter the frequencies:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &freq[i]);
    }

    int minCost = optimalBST(keys, freq, n);

    printf("Minimum cost of the Optimal Binary Search Tree: %d\n", minCost);

    return 0;
}
