#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

#define MAX_VERTICES 20

// Structure to represent a graph
typedef struct {
    int numVertices;
    int adjacencyMatrix[MAX_VERTICES][MAX_VERTICES];
} Graph;

// Function to create a graph
Graph* createGraph(int numVertices) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->numVertices = numVertices;
    return graph;
}

// Function to find the vertex with the minimum key value
int minKey(int key[], bool mstSet[], int numVertices) {
    int min = INT_MAX, minIndex;

    for (int v = 0; v < numVertices; v++) {
        if (!mstSet[v] && key[v] < min) {
            min = key[v];
            minIndex = v;
        }
    }

    return minIndex;
}

// Function to print the Minimum Cost Spanning Tree
void printMST(int parent[], int graph[MAX_VERTICES][MAX_VERTICES], int numVertices) {
    printf("Minimum Cost Spanning Tree:\n");
    for (int v = 1; v < numVertices; v++) {
        printf("Edge %d: %d -- %d, Weight: %d\n", v, parent[v], v, graph[v][parent[v]]);
    }
}

// Function to find the Minimum Cost Spanning Tree using Prim's algorithm
void primMST(Graph* graph) {
    int numVertices = graph->numVertices;
    int parent[MAX_VERTICES];
    int key[MAX_VERTICES];
    bool mstSet[MAX_VERTICES];

    for (int v = 0; v < numVertices; v++) {
        key[v] = INT_MAX;
        mstSet[v] = false;
    }

    key[0] = 0;
    parent[0] = -1;

    for (int count = 0; count < numVertices - 1; count++) {
        int u = minKey(key, mstSet, numVertices);
        mstSet[u] = true;

        for (int v = 0; v < numVertices; v++) {
            if (graph->adjacencyMatrix[u][v] && !mstSet[v] && graph->adjacencyMatrix[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph->adjacencyMatrix[u][v];
            }
        }
    }

    printMST(parent, graph->adjacencyMatrix, numVertices);
}

int main() {
    int numVertices;

    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);

    Graph* graph = createGraph(numVertices);

    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            scanf("%d", &graph->adjacencyMatrix[i][j]);
        }
    }

    primMST(graph);

    return 0;
}
