#include <stdio.h>
#include <stdbool.h>
#include <limits.h>
#define MAX_VERTICES 20
#define MAX_EDGES 100
typedef struct {
 int source;
 int destination;
 int weight;
} Edge;
int numVertices, numEdges;
Edge edges[MAX_EDGES];
int distances[MAX_VERTICES];
void bellmanFord(int source) {
 for (int i = 0; i < numVertices; i++) {
 if (i == source) {
 distances[i] = 0;
 } else {
 distances[i] = INT_MAX;
 }
 }
 for (int i = 0; i < numVertices - 1; i++) {
 for (int j = 0; j < numEdges; j++) {
 int u = edges[j].source;
 int v = edges[j].destination;
 int weight = edges[j].weight;
 if (distances[u] != INT_MAX && distances[u] + weight < distances[v]) {
 distances[v] = distances[u] + weight;
 }
 }
 }
 for (int i = 0; i < numEdges; i++) {
 int u = edges[i].source;
 int v = edges[i].destination;
 int weight = edges[i].weight;
 if (distances[u] != INT_MAX && distances[u] + weight < distances[v]) {
 printf("Negative-weight cycle detected. The graph contains a negative-weight cycle.\n");
 return;
 }
 }
 printf("Vertex\tDistance from Source\n");
 for (int i = 0; i < numVertices; i++) {
 printf("%d\t%d\n", i, distances[i]);
 }
}
int main() {
 printf("Enter the number of vertices: ");
 scanf("%d", &numVertices);
 printf("Enter the number of edges: ");
 scanf("%d", &numEdges);
 printf("Enter the edges (source, destination, weight):\n");
 for (int i = 0; i < numEdges; i++) {
 scanf("%d %d %d", &edges[i].source, &edges[i].destination, &edges[i].weight);
 }
 int source;
 printf("Enter the source vertex: ");
 scanf("%d", &source);
 bellmanFord(source); return 0;}