#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

// Function to sort an array in ascending order
void sortArray(int arr[], int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

// Function to calculate the total seek time for the given order of tapes
int calculateSeekTime(int arr[], int size) {
    int seekTime = 0;
    for (int i = 1; i < size; i++) {
        seekTime += abs(arr[i] - arr[i - 1]);
    }
    return seekTime;
}

// Function to implement the Optimal Storage on Tapes algorithm
void optimalStorageOnTapes(int tapes[][MAX_SIZE], int numTapes, int elements[], int numElements) {
    sortArray(elements, numElements);

    int currentIndex = 0;
    int* tapeSizes = (int*)calloc(numTapes, sizeof(int));

    for (int i = 0; i < numElements; i++) {
        int minSize = tapeSizes[0];
        int minIndex = 0;

        for (int j = 1; j < numTapes; j++) {
            if (tapeSizes[j] < minSize) {
                minSize = tapeSizes[j];
                minIndex = j;
            }
        }

        tapes[minIndex][tapeSizes[minIndex]] = elements[i];
        tapeSizes[minIndex]++;
    }

    printf("Optimal Storage on Tapes:\n");
    for (int i = 0; i < numTapes; i++) {
        printf("Tape %d: ", i + 1);
        for (int j = 0; j < tapeSizes[i]; j++) {
            printf("%d ", tapes[i][j]);
        }
        printf("\n");
    }

    free(tapeSizes);
}

int main() {
    int numTapes, numElements;

    printf("Enter the number of tapes: ");
    scanf("%d", &numTapes);

    printf("Enter the number of elements: ");
    scanf("%d", &numElements);

    int tapes[MAX_SIZE][MAX_SIZE];
    int elements[MAX_SIZE];

    printf("Enter the elements:\n");
    for (int i = 0; i < numElements; i++) {
        scanf("%d", &elements[i]);
    }

    optimalStorageOnTapes(tapes, numTapes, elements, numElements);

    return 0;
}
